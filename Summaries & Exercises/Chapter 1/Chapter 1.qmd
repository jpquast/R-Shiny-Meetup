---
title: 'Summary of "Mastering Shiny" Chapter 1'
author: "Jan-Philipp Quast"
format: html
editor: visual
---

Every Shiny application consists of two parts:

-   The **UI** (short for user interface) which defines how your app *looks.*

-   The **server function** which defines how your app *works.*

In addition, Shiny uses **reactive programming** in order to update outputs based on changing inputs.

## Getting Started

Both the UI and server function part of a Shiny app is contained within the same file. This file is called `app.R`. The most basic Shiny app possible contains the following code:

```{r}
#| eval: false
# Load the Shiny package
library(shiny)

# The UI side of the app
ui <- fluidPage(
  "Hello, world!"
)
# The server side of the app
server <- function(input, output, session) {
  # Has no content so far.
}

# Construct application
shinyApp(ui, server)
```

In RStudio you can create a new app like this:

-   Create a new directory and an `app.R` file containing a basic app in one step by clicking **File \| New Project**, then selecting **New Directory** and **Shiny Web Application**.

**The above app can be found in the `app_1` folder.**

Run the app like this:

-   Click the **Run App** button in the document toolbar.

-   Use a keyboard shortcut: `Cmd/Ctrl` + `Shift` + `Enter`.

The URL displayed in the R console can be used to open the app in any web browser. It consists of the standard address for "this computer" (127.0.0.1) and a random port (e.g. 3827).

If you update the code of your app you can reload it without closing it to include the changes:

-   You can either press the **Reload app** button in the toolbox or use the `Cmd/Ctrl` + `Shift` + `Enter` keyboard shortcut.

## UI controls

You can modify the UI of the above app to make it more interesting. Use the code below to show all datasets provided with the `datasets` R package.

**The modified app can be found in the `app_2` folder.**

```{r}
#| eval: false
ui <- fluidPage(
  selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
  verbatimTextOutput("summary"),
  tableOutput("table")
)
```

-   [`fluidPage()`](https://rdrr.io/pkg/shiny/man/fluidPage.html) is a **layout function** that sets up the basic visual structure of the page.

-   [`selectInput()`](https://rdrr.io/pkg/shiny/man/selectInput.html) is an **input control** that lets the user interact with the app by providing a value. In this case, it's a select box with the label "Dataset" and lets you choose one of the built-in datasets that come with R. The input box has the inputId `"dataset"`.

-   [`verbatimTextOutput()`](https://rdrr.io/pkg/shiny/man/textOutput.html) and [`tableOutput()`](https://rdrr.io/pkg/shiny/man/renderTable.html) are **output controls** that tell Shiny *where* to put rendered output. [`verbatimTextOutput()`](https://rdrr.io/pkg/shiny/man/textOutput.html) displays code and [`tableOutput()`](https://rdrr.io/pkg/shiny/man/renderTable.html) displays tables.

## Adding behaviour

Shiny uses reactive programming, which means you tell it how to perform a computation in contrast to actually executing it right away.

If you add the bellow code to the app you tell it how the two outputs already included in the UI are actually generated.

```{r}
#| eval: false
server <- function(input, output, session) {
  output$summary <- renderPrint({
    dataset <- get(input$dataset, "package:datasets")
    summary(dataset)
  })
  
  output$table <- renderTable({
    dataset <- get(input$dataset, "package:datasets")
    dataset
  })
}
```

The `get()` function retrieves an object from a specific environment. In this case from the `"package:datasets"` environment.

If you assign the result of a computation, which is wrapped in e.g. `renderPrint()` or `renderTabel()` to `output$ID` you can use this specific output in the UI part of the app referring to the `ID`.

The specific "render" function used should be paired with a compatible "output" function in the UI part of the app.

The essence of **reactivity** is the following: outputs automatically *react* (recalculate) when their inputs change.

## Reactive expressions

You can create a reactive expression by wrapping your code in `reactive({...})` and assigning it to a variable. You can then use it by calling it like a function.

A very important difference between a function and a reactive expression is that the reactive expression only runs once and caches its result until it needs to be updated.

We can update the above created app by reducing duplication by creating a reactive expression with the `get()` function.

```{r}
#| eval: false
server <- function(input, output, session) {
  # Create a reactive expression
  dataset <- reactive({
    get(input$dataset, "package:datasets")
  })

  output$summary <- renderPrint({
    # Use a reactive expression by calling it like a function
    summary(dataset())
  })
  
  output$table <- renderTable({
    dataset()
  })
}
```

**The modified app can be found in the `app_3` folder.**

## Exercises

1.  Create an app that greets the user by name. You don't know all the functions you need to do this yet, so I've included some lines of code below. Think about which lines you'll use and then copy and paste them into the right place in a Shiny app.

```{r}
#| eval: false
tableOutput("mortgage")
output$greeting <- renderText({
  paste0("Hello ", input$name)
})
numericInput("age", "How old are you?", value = NA)
textInput("name", "What's your name?")
textOutput("greeting")
output$histogram <- renderPlot({
  hist(rnorm(1000))
}, res = 96)
```

2.  Suppose your friend wants to design an app that allows the user to set a number (`x`) between 1 and 50, and displays the result of multiplying this number by 5. This is their first attempt:

```{r}
#| eval: false
library(shiny)

ui <- fluidPage(
  sliderInput("x", label = "If x is", min = 1, max = 50, value = 30),
  "then x times 5 is",
  textOutput("product")
)

server <- function(input, output, session) {
  output$product <- renderText({ 
    x * 5
  })
}

shinyApp(ui, server)
```

But unfortunately it has an error:

![](https://d33wubrfki0l68.cloudfront.net/cc947455e46b88242e9c3460d3c2291f9f9393c2/093b0/demos/basic-app/ex-x-times-5.png)

Can you help them find and correct the error?

3.  Extend the app from the previous exercise to allow the user to set the value of the multiplier, `y`, so that the app yields the value of `x * y`. The final result should look like this:

![](https://d33wubrfki0l68.cloudfront.net/6a4de45b5dd90ca5c9e9ba6bf90d4be54d5ac8db/dc9e2/demos/basic-app/ex-x-times-y.png)

4.  Take the following app which adds some additional functionality to the last app described in the last exercise. What's new? How could you reduce the amount of duplicated code in the app by using a reactive expression.

```{r}
#| eval: false
library(shiny)

ui <- fluidPage(
  sliderInput("x", "If x is", min = 1, max = 50, value = 30),
  sliderInput("y", "and y is", min = 1, max = 50, value = 5),
  "then, (x * y) is", textOutput("product"),
  "and, (x * y) + 5 is", textOutput("product_plus5"),
  "and (x * y) + 10 is", textOutput("product_plus10")
)

server <- function(input, output, session) {
  output$product <- renderText({ 
    product <- input$x * input$y
    product
  })
  output$product_plus5 <- renderText({ 
    product <- input$x * input$y
    product + 5
  })
  output$product_plus10 <- renderText({ 
    product <- input$x * input$y
    product + 10
  })
}

shinyApp(ui, server)
```

5.  The following app is very similar to one you've seen earlier in the chapter: you select a dataset from a package (this time we're using the **ggplot2** package) and the app prints out a summary and plot of the data. It also follows good practice and makes use of reactive expressions to avoid redundancy of code. However there are three bugs in the code provided below. Can you find and fix them?

```{r}
#| eval: false
library(shiny)
library(ggplot2)

datasets <- c("economics", "faithfuld", "seals")
ui <- fluidPage(
  selectInput("dataset", "Dataset", choices = datasets),
  verbatimTextOutput("summary"),
  tableOutput("plot")
)

server <- function(input, output, session) {
  dataset <- reactive({
    get(input$dataset, "package:ggplot2")
  })
  output$summmry <- renderPrint({
    summary(dataset())
  })
  output$plot <- renderPlot({
    plot(dataset)
  }, res = 96)
}

shinyApp(ui, server)
```
